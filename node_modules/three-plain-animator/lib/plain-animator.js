
class PlainAnimator {
    constructor(texture, tilesAmountHorizontally, tilesAmountVertically, tilesTotalAmount, framesPerSecond) {
        this.texture = texture;
        this.tilesAmountHorizontally = tilesAmountHorizontally;
        this.tilesAmountVertically = tilesAmountVertically;
        this.tilesTotalAmount = tilesTotalAmount;
        this.currentFrameDisplayTime = 0;
        this.currentFrame = 0;
        this.clock = new THREE.Clock();
        this.end$ = new rxjs.Subject();
        this.tilesTotalAmount -= 1; // indexing from 0
        this.frameDisplayDuration = 1000 / framesPerSecond;
        this.texture.wrapS = THREE.RepeatWrapping;
        this.texture.wrapT = THREE.RepeatWrapping;
        this.texture.repeat.set(1 / tilesAmountHorizontally, 1 / tilesAmountVertically);
    }
    init(startFrame = 0) {
        this.currentFrame = startFrame;
        this.currentFrameDisplayTime = 0;
        this.clock = new THREE.Clock();
        this.updateTexture();
        return this.texture;
    }
    animate() {
        this.currentFrameDisplayTime += this.clock.getDelta() * 1000;
        while (this.currentFrameDisplayTime > this.frameDisplayDuration) {
            this.currentFrameDisplayTime -= this.frameDisplayDuration;
            if (this.currentFrame === this.tilesTotalAmount) {
                this.end$.next();
            }
            this.currentFrame = this.currentFrame < this.tilesTotalAmount ? this.currentFrame + 1 : 0;
            this.updateTexture();
        }
    }
    get end() {
        return this.end$.asObservable();
    }
    updateTexture() {
        const tileHeight = 1 / this.tilesAmountVertically;
        const currentColumn = this.currentFrame % this.tilesAmountHorizontally;
        const currentRow = Math.floor(this.currentFrame / this.tilesAmountHorizontally);
        this.texture.offset.x = currentColumn / this.tilesAmountHorizontally;
        this.texture.offset.y = 1 - currentRow / this.tilesAmountVertically - tileHeight;
    }
}
